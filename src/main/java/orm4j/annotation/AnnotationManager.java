/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package orm4j.annotation;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import orm4j.EntityObject;

/**
 *
 * @author grig
 */
public class AnnotationManager {
    
    public static String getEntityTableName(Class<? extends EntityObject> c) {
        Table ann = c.getAnnotation(Table.class);

        if (ann != null) {
            return ann.name();
        } else {
            return null;
        }
    }

    public static String GetEntityIdFieldName(Class<? extends EntityObject> c) {
        for (Field field : Arrays.asList(c.getDeclaredFields())) {
            for (Annotation annotation : Arrays.asList(field.getDeclaredAnnotations())) {
                if (annotation instanceof EntityId) {
                    return field.getAnnotation(Column.class).name();
                }
            }
        }

        return null;
    }

    public static String GetEntityNameFieldName(Class<? extends EntityObject> c) {
        for (Field field : Arrays.asList(c.getDeclaredFields())) {
            for (Annotation annotation : Arrays.asList(field.getDeclaredAnnotations())) {
                if (annotation instanceof EntityName) {
                    return field.getAnnotation(Column.class).name();
                }
            }
        }

        return null;
    }

    public static Map<String, String> GetEntityColumnsWithParameters(Class<?> c, boolean hasAutoGenerated) {
        Map<String, String> res = new HashMap<String, String>();

        for (Field field : Arrays.asList(c.getDeclaredFields())) {
            if ((field.isAnnotationPresent(Column.class) && hasAutoGenerated)
                    || (field.isAnnotationPresent(Column.class) && !hasAutoGenerated
                    && !(field.isAnnotationPresent(AutoIncremented.class)))) {
                String name = field.getAnnotation(Column.class).name();
                res.put(name, String.format(":%s", name));
            }
        }

        return res;
    }

    public static List<Field> getFieldsByAnnotation(Class<?> c, Class<? extends Annotation> inAnnotation) {
        List<Field> res = new ArrayList<Field>();

        for (Field field : Arrays.asList(c.getDeclaredFields())) {
            if (field.isAnnotationPresent(inAnnotation)) {
                res.add(field);
            }
        }

        return res;
    }
    
    public static Field getFieldByColumnName(Class<?> c, String columnName) {

        for (Field field : Arrays.asList(c.getDeclaredFields())) {
            if (field.isAnnotationPresent(Column.class)) {
                String fieldColumnName = field.getAnnotation(Column.class).name();
                if (fieldColumnName.equalsIgnoreCase(columnName))
                    return field;
            }
        }

        return null;
    }

    public static Field getFKFieldForEntity(Class<?> parentEntity, Class<?> childEntity) {
        for (Field field : getFieldsByAnnotation(childEntity, ForeignKey.class)) {
            ForeignKey ann = field.getAnnotation(ForeignKey.class);
            if (ann.parentEntity()
                    .equals(parentEntity)) {
                return field;
            }
        }
        return null;
    }
}
